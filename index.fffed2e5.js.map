{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,E,O,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,C,G,E,M,G,G,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,E,I,A,W,M,A,U,6I,G,CCEA,SAAS,EAAoB,CAAI,EAC/B,IAAI,EAAU,EACV,EAAc,EAElB,GACE,IACA,EAAc,EAAY,sBAAsB,OACzC,EAAa,AAEtB,OAAO,CAAO,CAAC,EAAU,EAAE,CAAC,SAAS,CAAC,WAAW,EACnD,CA+BA,SAAS,EAAe,CAAM,EAC5B,OAAO,SAAS,EAAO,UAAU,CAAC,IAAK,IAAI,KAAK,CAAC,GACnD,CAMA,SAAS,EAAY,CAAY,EAC/B,OAAO,EAAa,MAAM,EAAI,CAChC,CAiEA,SAAS,IACP,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAW,SAAS,aAAa,CAAC,SAEnC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,GAAA,A,WAAK,IAAM,EAAN,EAAA,KAAA,CACG,EAAM,SAAS,aAAa,CAAC,MAC7B,EAAQ,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,WAAM,OAAA,SAAS,aAAa,CAAC,K,GAEvD,EAAsD,EAA5D,IAAA,CAAkB,EAA0C,EAA1C,QAAA,CAAU,EAAgC,EAAhC,MAAA,CAAQ,EAAwB,EAAxB,GAAA,CAAK,EAAmB,EAAnB,MAAA,CAAQ,EAAW,EAAX,MAAzD,AAEA,CAAA,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAxGpB,IACA,AAuGoC,EAtGjC,QAAQ,GACR,KAAK,CAAC,IACN,MAAM,CACL,SAAC,CAAA,CAAM,CAAA,CAAM,CANnB,EAOQ,OAAA,EACA,EACE,CAAA,AAAA,CAAA,AAgG4B,EAhGrB,QAAQ,GAAG,MAAM,CAAG,EAAQ,CAAA,EAAK,GAAM,EAAI,IAAM,EAAA,CAC5D,EAAA,IAED,KAAK,CAAC,EAAG,IA+FZ,EAAM,OAAO,CAAC,SAAC,CAAf,EACE,EAAK,gBAAgB,CAAC,WAAY,GAClC,EAAI,MAAM,CAAC,EACb,GAEI,GACF,EAAI,SAAS,CAAC,GAAG,CAAC,UAGpB,EAAI,gBAAgB,CAAC,QAAS,GAC9B,EAAS,MAAM,CAAC,EAClB,G,C,M,E,CAvBK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAyBL,EAAM,WAAW,CAAC,EACpB,CAoDA,SAAS,IACP,IAAM,EAAmB,IAAI,CAAC,SAAS,AAEnC,CAAA,IAAqB,EACvB,EAAO,OAAO,IAEd,EAAyB,EACzB,EAAO,IAAI,CAAC,AAzDhB,SAAuB,CAAgB,EACrC,OAAQ,GACN,IAAK,OACH,OAAO,SAAC,CAAA,CAAa,CAArB,SACE,AAAI,EAAY,IAAI,CAAG,EAAa,IAAI,CAC/B,EAGL,EAAY,IAAI,CAAG,EAAa,IAAI,CAC/B,GAGF,CACT,CAEF,KAAK,WACH,OAAO,SAAC,CAAA,CAAa,CAArB,SACE,AAAI,EAAY,QAAQ,CAAG,EAAa,QAAQ,CACvC,EAGL,EAAY,QAAQ,CAAG,EAAa,QAAQ,CACvC,GAGF,CACT,CAEF,KAAK,SACH,OAAO,SAAC,CAAA,CAAa,CAArB,SACE,AAAI,EAAY,MAAM,CAAG,EAAa,MAAM,CACnC,EAGL,EAAY,MAAM,CAAG,EAAa,MAAM,CACnC,GAGF,CACT,CAEF,KAAK,MACH,OAAO,SAAC,CAAA,CAAa,CAArB,EAAsC,OAAA,EAAY,GAAG,CAAG,EAAa,GAAG,A,CAE1E,KAAK,SACH,OAAO,SAAC,CAAA,CAAa,CAArB,EACE,OAAA,EAAY,MAAM,CAAG,EAAa,MAAM,A,CAC9C,CACF,EAS8B,KAG5B,GACF,CAYA,SAAS,IATP,SAAS,gBAAgB,CAAC,YAAY,OAAO,CAAC,SAAC,CAA/C,EACE,EAAI,SAAS,CAAC,MAAM,CAAC,SACvB,GAEA,EAAO,OAAO,CAAC,SAAC,CAAhB,EACE,EAAO,MAAM,CAAG,CAAA,CAClB,GAMA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAInB,IAAK,IAFC,EAAsB,SAAS,gBAAgB,CAAC,YAE7C,EAAI,EAAG,EAAI,EAAoB,MAAM,CAAE,IAC1C,CAAmB,CAAC,EAAE,CAAC,OAAO,CAAC,YACjC,CAAA,CAAM,CAAC,EAAE,CAAC,MAAM,CAAG,CAAA,CAFvB,CAKF,CAEA,SAAS,EAAS,CAAC,EACjB,GACE,GACC,CAAA,AAAW,SAAX,EAAE,IAAI,EAAgB,AAAW,YAAX,EAAE,IAAI,EAAkB,AAAU,UAAV,EAAE,GAAG,AAAK,EACzD,CACA,IAAM,EAAS,EAAoB,IAAI,CAAC,aAAa,EACjD,EAAe,CAAA,EAInB,GAFA,EAA4B,CAAA,EArMvB,AAuMa,IAAI,CAAC,KAAK,CAvMlB,MAAM,EAAI,EA2NlB,EAAe,CAAA,OAnBf,OAAQ,GACN,IAAK,OACE,EAAY,IAAI,CAAC,KAAK,GACzB,CAAA,EAAe,CAAA,CADjB,EAGA,KAEF,KAAK,MACC,CAAA,AAAW,IAAI,CAAC,KAAK,CAxMpB,IAIN,AAoMwC,IAAI,CAAC,KAAK,CApM5C,EAoM4C,GAC/C,CAAA,EAAe,CAAA,CADjB,EAGA,KAEF,KAAK,SACgB,IAAI,CAAC,KAAK,EAtMpB,GAuMP,CAAA,EAAe,CAAA,CADjB,CAGJ,CAKE,IACF,AAjQN,SAAwB,CAAG,EACzB,IAAI,EAAU,EACV,EAAa,EAEjB,GACE,IACA,EAAa,EAAW,sBAAsB,OACvC,EAAY,AAErB,OAAO,CAAM,CAAC,EAAU,EAAE,AAC5B,EAuPqB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,EAAO,CAAG,IAAI,CAAC,KAAK,CACrE,EAAyB,IAG3B,IACA,IAAI,CAAC,MAAM,GACX,EAA4B,CAAA,CAC9B,CACF,CAEA,SAAS,IACP,GACE,AAA6B,IAA7B,IAAI,CAAC,UAAU,CAAC,QAAQ,EACxB,CAAC,SAAS,aAAa,CAAC,2BACxB,CACA,OAAQ,EAAoB,IAAI,GAC9B,IAAK,OACL,IAAK,WACH,EAAgB,IAAI,CAAE,OAAQ,IAAI,CAAC,SAAS,EAC5C,KACF,KAAK,aAsF4B,EAC/B,EAD+B,EArFR,IAAI,CAAC,SAAS,CAwF3C,CAFM,EAAS,SAAS,aAAa,CAAC,WAE/B,SAAS,CAAG,aACnB,EAAc,GACd,EAAO,aAAa,CAAG,EAAQ,OAAO,CAAC,GAEvC,EAAO,gBAAgB,CAAC,OAAQ,GAChC,EAAO,gBAAgB,CAAC,UAAW,GAEnC,AA/FuB,IAAI,CA+Ff,MAAM,CAAC,GA9Fb,KACF,KAAK,MACH,EAAgB,IAAI,CAAE,SAAU,IAAI,CAAC,SAAS,EAC9C,KACF,KAAK,SACH,EAAgB,IAAI,CAAE,SAAU,EAAe,IAAI,CAAC,SAAS,EACjE,CACA,IAAI,CAAC,UAAU,CAAC,MAAM,EACxB,CACF,CA+BA,SAAS,EAAmB,CAAW,CAAE,CAAK,CAAE,CAAW,CAAE,CAAI,EAC/D,IAAM,EAAe,SAAS,aAAa,CAAC,OACtC,EAAoB,SAAS,aAAa,CAAC,MAC3C,EAA0B,SAAS,aAAa,CAAC,IAEvD,CAAA,EAAa,SAAS,CAAG,gBAAkB,EAC3C,EAAa,OAAO,CAAC,EAAE,CAAG,eAC1B,EAAkB,SAAS,CAAG,QAC9B,EAAkB,WAAW,CAAG,EAChC,EAAwB,WAAW,CAAG,EAEtC,EAAa,MAAM,CAAC,GACpB,EAAa,MAAM,CAAC,GACpB,EAAY,MAAM,CAAC,GAEnB,WAAW,WACT,EAAa,KAAK,CAAC,OAAO,CAAG,MAC/B,EAAG,KACL,CAEA,SAAS,EAAc,CAAW,EAC3B,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAyB,CAAzB,IAAM,EAAN,EAAA,KAAA,CACG,EAAS,SAAS,aAAa,CAAC,SAEtC,CAAA,EAAO,SAAS,CAAG,EACnB,EAAO,KAAK,CAAG,EAEf,EAAY,MAAM,CAAC,EACrB,C,C,M,E,CAPK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQP,CAEA,SAAS,EAAgB,CAAW,CAAE,CAAI,CAAE,CAAK,EAC/C,IAAM,EAAQ,SAAS,aAAa,CAAC,QAErC,CAAA,EAAM,SAAS,CAAG,aAClB,EAAM,IAAI,CAAG,EACb,EAAM,KAAK,CAAG,EAEd,EAAM,gBAAgB,CAAC,OAAQ,GAC/B,EAAM,gBAAgB,CAAC,UAAW,GAElC,EAAY,MAAM,CAAC,EACrB,CAeA,SAAS,EAAY,CAAW,CAAE,CAAS,CAAE,CAAI,CAAE,CAAS,EAC1D,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,QAErC,CAAA,EAAM,SAAS,CAAG,EAClB,EAAM,IAAI,CAAG,EACb,EAAM,IAAI,CAAG,EACb,EAAM,OAAO,CAAC,EAAE,CAAG,EACnB,EAAM,QAAQ,CAAG,CAAA,EAEjB,EAAM,MAAM,CAAC,GACb,EAAY,MAAM,CAAC,EACrB,CA4CA,IAjBoB,EACZ,EA1B2B,EAAW,EACtC,EACA,EAY2B,EAAY,EACvC,EA2BF,EAAO,SAAS,gBAAgB,CAAC,YACjC,EAAS,EAAE,CACX,EAAU,SAAS,gBAAgB,CAAC,YACpC,EAAU,CACd,QACA,YACA,SACA,WACA,YACA,gBACD,CACG,EAAyB,GACzB,EAA4B,CAAA,EAEhC,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,IAAsD,EAAA,EAAA,EAAI,QAAQ,CAAA,GAA3D,EAA+C,CAAA,CAAA,EAAA,CAAjC,EAAiC,CAAA,CAAA,EAAA,CAAvB,EAAuB,CAAA,CAAA,EAAA,CAAf,EAAe,CAAA,CAAA,EAAA,CAAV,EAAU,CAAtD,CAAA,EAAA,CAEA,EAAO,IAAI,CAAC,CACV,KAAM,EAAa,SAAS,CAC5B,SAAU,EAAS,SAAS,CAC5B,OAAQ,EAAO,SAAS,CACxB,IAAK,SAAS,EAAI,SAAS,EAC3B,OAAQ,EAAe,EAAO,SAAS,EACvC,OAAQ,CAAA,CACV,GAEK,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,EAAI,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA1B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACE,gBAAgB,CAAC,WAAY,E,C,M,E,CAD/B,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,EAAI,gBAAgB,CAAC,QAAS,EAChC,GAEA,EAAQ,OAAO,CAAC,SAAC,CAAjB,EACE,EAAO,gBAAgB,CAAC,QAAS,EACnC,GApDoB,EAsDT,SAAS,IAAI,CAnDtB,CAFM,EAAO,SAAS,aAAa,CAAC,SAE/B,SAAS,CAAG,oBAEjB,EAAY,EAAM,QAAS,OAAQ,QACnC,EAAY,EAAM,YAAa,OAAQ,YA/BN,EAiCd,UAjCyB,EAiCd,SAhCxB,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAS,SAAS,aAAa,CAAC,UAEtC,EAAM,SAAS,CAAG,EAClB,EAAO,IAAI,CAAG,EACd,EAAO,OAAO,CAAC,EAAE,CAAG,EACpB,EAAO,QAAQ,CAAG,CAAA,EAClB,EAAc,GAEd,EAAM,MAAM,CAAC,GACb,AAsBa,EAtBD,MAAM,CAAC,GAwBnB,EAAY,EAAM,OAAQ,SAAU,OACpC,EAAY,EAAM,UAAW,SAAU,UAtBN,EAuBd,gBAvB0B,EAuBT,SApBpC,CAFM,EAAS,SAAS,aAAa,CAAC,WAE/B,SAAS,CAAG,EACnB,EAAO,IAAI,CAAG,EAEd,EAAO,gBAAgB,CAAC,QAxH1B,SAAmB,CAAC,EAClB,IACE,EAAA,EAAA,SAAS,gBAAgB,CAAC,iBAAA,GADrB,EACL,CAAA,CAAA,EAAA,CADmB,EACnB,CAAA,CAAA,EAAA,CAD6B,EAC7B,CAAA,CAAA,EAAA,CADkC,EAClC,CADF,CAAA,EAAA,CAEM,EAAS,SAAS,aAAa,CAAC,UAEtC,EAAE,cAAc,GAEZ,AApPN,SAAwB,CAAY,CAAE,CAAQ,CAAE,CAAM,CAAE,CAAG,CAAE,CAAM,EAC5D,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,SAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,GArBK,AAqBY,AADd,EAAA,KAAA,CACkB,KAAK,CArBhB,MAAM,EAAI,EA6BlB,OAPA,EACE,SAAS,IAAI,CACb,QACA,2BACA,SAGK,CAAA,C,C,M,E,CATN,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,QAaL,AAAK,EAAY,EAAa,KAAK,EAzB5B,AA+BQ,EAAI,KAAK,CA/BX,IAgCX,EACE,SAAS,IAAI,CACb,QACA,yBACA,SAGK,CAAA,GAnCF,AAsCM,EAAI,KAAK,CAtCT,IAuCX,EAAmB,SAAS,IAAI,CAAE,QAAS,uBAAwB,SAE5D,CAAA,GAGT,AAAmB,EAAO,KAAK,EAxCd,IAyCf,EACE,SAAS,IAAI,CACb,QACA,yCACA,SAGK,CAAA,IA9BP,EAAmB,SAAS,IAAI,CAAE,QAAS,qBAAsB,SAE1D,CAAA,EAgCX,EAmMqB,EAAc,EAAU,EAAQ,EAAK,KACtD,EAAO,IAAI,CAAC,CACV,KAAM,EAAa,KAAK,CACxB,SAAU,EAAS,KAAK,CACxB,OAAQ,EAAO,KAAK,CACpB,IAAK,EAAI,KAAK,CACd,OAAQ,EAAO,KAAK,CACpB,OAAQ,CAAA,CACV,GAEA,IACA,EAAyB,GAEzB,EACE,SAAS,IAAI,CACb,UACA,6BACA,WAGN,GA+FE,AAea,EAfD,MAAM,CAAC,GAiBnB,EAAY,MAAM,CAAC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction getCellColumnHeader(cell) {\n    var counter = 0;\n    var currentCell = cell;\n    do {\n        counter++;\n        currentCell = currentCell.previousElementSibling;\n    }while (currentCell);\n    return headers[counter - 1].innerText.toLowerCase();\n}\nfunction getPersonByRow(row) {\n    var counter = 0;\n    var currentRow = row;\n    do {\n        counter++;\n        currentRow = currentRow.previousElementSibling;\n    }while (currentRow);\n    return people[counter - 1];\n}\nfunction salaryToText(salary) {\n    return \"$\" + salary.toString().split(\"\").reduce(function(text, char, index) {\n        return text + char + ((salary.toString().length - index - 1) % 3 === 0 ? \",\" : \"\");\n    }, \"\").slice(0, -1);\n}\nfunction salaryToNumber(salary) {\n    return parseInt(salary.replaceAll(\",\", \"\").slice(1));\n}\nfunction isInputEmpty(text) {\n    return text.length <= 0;\n}\nfunction isNameValid(employeeName) {\n    return employeeName.length >= 4;\n}\nfunction isTooYoung(age) {\n    return age < 18;\n}\nfunction isTooOld(age) {\n    return age > 90;\n}\nfunction isSalaryValid(salary) {\n    return salary >= 0;\n}\nfunction areInputsValid(employeeName, position, office, age, salary) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = arguments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var arg = _step.value;\n            if (isInputEmpty(arg.value)) {\n                appendNotification(document.body, \"Error\", \"All fields are required!\", \"error\");\n                return false;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    if (!isNameValid(employeeName.value)) {\n        appendNotification(document.body, \"Error\", \"Name is too short!\", \"error\");\n        return false;\n    }\n    if (isTooYoung(age.value)) {\n        appendNotification(document.body, \"Error\", \"Employee is too young!\", \"error\");\n        return false;\n    }\n    if (isTooOld(age.value)) {\n        appendNotification(document.body, \"Error\", \"Employee is too old!\", \"error\");\n        return false;\n    }\n    if (!isSalaryValid(salary.value)) {\n        appendNotification(document.body, \"Error\", \"Salary should be higher or equal to 0!\", \"error\");\n        return false;\n    }\n    return true;\n}\nfunction refreshTable() {\n    var tBody = document.querySelector(\"tbody\");\n    var newTBody = document.createElement(\"tbody\");\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var person = _step.value;\n            var row = document.createElement(\"tr\");\n            var cells = Array.from({\n                length: 5\n            }, function() {\n                return document.createElement(\"td\");\n            });\n            var personName = person.name, position = person.position, office = person.office, age = person.age, salary = person.salary, active = person.active;\n            cells[0].textContent = personName;\n            cells[1].textContent = position;\n            cells[2].textContent = office;\n            cells[3].textContent = age;\n            cells[4].textContent = salaryToText(salary);\n            cells.forEach(function(cell) {\n                cell.addEventListener(\"dblclick\", editCell);\n                row.append(cell);\n            });\n            if (active) row.classList.add(\"active\");\n            row.addEventListener(\"click\", selectRow);\n            newTBody.append(row);\n        };\n        for(var _iterator = people[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    tBody.replaceWith(newTBody);\n}\nfunction getComparator(targetHeaderText) {\n    switch(targetHeaderText){\n        case \"Name\":\n            return function(firstPerson, secondPerson) {\n                if (firstPerson.name > secondPerson.name) return 1;\n                if (firstPerson.name < secondPerson.name) return -1;\n                return 0;\n            };\n        case \"Position\":\n            return function(firstPerson, secondPerson) {\n                if (firstPerson.position > secondPerson.position) return 1;\n                if (firstPerson.position < secondPerson.position) return -1;\n                return 0;\n            };\n        case \"Office\":\n            return function(firstPerson, secondPerson) {\n                if (firstPerson.office > secondPerson.office) return 1;\n                if (firstPerson.office < secondPerson.office) return -1;\n                return 0;\n            };\n        case \"Age\":\n            return function(firstPerson, secondPerson) {\n                return firstPerson.age - secondPerson.age;\n            };\n        case \"Salary\":\n            return function(firstPerson, secondPerson) {\n                return firstPerson.salary - secondPerson.salary;\n            };\n    }\n}\nfunction sortTable() {\n    var targetHeaderText = this.innerText;\n    if (targetHeaderText === sortedColumnHeaderText) people.reverse();\n    else {\n        sortedColumnHeaderText = targetHeaderText;\n        people.sort(getComparator(targetHeaderText));\n    }\n    refreshTable();\n}\nfunction deactivateAllRows() {\n    document.querySelectorAll(\"tbody tr\").forEach(function(row) {\n        row.classList.remove(\"active\");\n    });\n    people.forEach(function(person) {\n        person.active = false;\n    });\n}\nfunction selectRow() {\n    deactivateAllRows();\n    this.classList.add(\"active\");\n    var rowsAfterActivation = document.querySelectorAll(\"tbody tr\");\n    for(var i = 0; i < rowsAfterActivation.length; i++)if (rowsAfterActivation[i].matches(\".active\")) people[i].active = true;\n}\nfunction saveCell(e) {\n    if (inputEventHandlerFinished && (e.type === \"blur\" || e.type === \"keydown\" && e.key === \"Enter\")) {\n        var header = getCellColumnHeader(this.parentElement);\n        var isInputValid = true;\n        inputEventHandlerFinished = false;\n        if (!isInputEmpty(this.value)) switch(header){\n            case \"name\":\n                if (!isNameValid(this.value)) isInputValid = false;\n                break;\n            case \"age\":\n                if (isTooYoung(this.value) || isTooOld(this.value)) isInputValid = false;\n                break;\n            case \"salary\":\n                if (!isSalaryValid(this.value)) isInputValid = false;\n        }\n        else isInputValid = false;\n        if (isInputValid) {\n            getPersonByRow(this.parentElement.parentElement)[header] = this.value;\n            sortedColumnHeaderText = \"\";\n        }\n        refreshTable();\n        this.remove();\n        inputEventHandlerFinished = true;\n    }\n}\nfunction editCell() {\n    if (this.firstChild.nodeType === 3 && !document.querySelector(\"td > input, td > select\")) {\n        switch(getCellColumnHeader(this)){\n            case \"name\":\n            case \"position\":\n                appendCellInput(this, \"text\", this.innerText);\n                break;\n            case \"office\":\n                appendCellSelect(this, this.innerText);\n                break;\n            case \"age\":\n                appendCellInput(this, \"number\", this.innerText);\n                break;\n            case \"salary\":\n                appendCellInput(this, \"number\", salaryToNumber(this.innerText));\n        }\n        this.firstChild.remove();\n    }\n}\nfunction addPerson(e) {\n    var _document_querySelectorAll = _sliced_to_array(document.querySelectorAll(\"label > input\"), 4), employeeName = _document_querySelectorAll[0], position = _document_querySelectorAll[1], age = _document_querySelectorAll[2], salary = _document_querySelectorAll[3];\n    var office = document.querySelector(\"select\");\n    e.preventDefault();\n    if (areInputsValid(employeeName, position, office, age, salary)) {\n        people.push({\n            name: employeeName.value,\n            position: position.value,\n            office: office.value,\n            age: age.value,\n            salary: salary.value,\n            active: false\n        });\n        refreshTable();\n        sortedColumnHeaderText = \"\";\n        appendNotification(document.body, \"Success\", \"New person has been added!\", \"success\");\n    }\n}\nfunction appendNotification(destination, title, description, type) {\n    var notification = document.createElement(\"div\");\n    var notificationTitle = document.createElement(\"h2\");\n    var notificationDescription = document.createElement(\"p\");\n    notification.className = \"notification \" + type;\n    notification.dataset.qa = \"notification\";\n    notificationTitle.className = \"title\";\n    notificationTitle.textContent = title;\n    notificationDescription.textContent = description;\n    notification.append(notificationTitle);\n    notification.append(notificationDescription);\n    destination.append(notification);\n    setTimeout(function() {\n        notification.style.display = \"none\";\n    }, 1999);\n}\nfunction appendOffices(destination) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = offices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var office = _step.value;\n            var option = document.createElement(\"option\");\n            option.innerText = office;\n            option.value = office;\n            destination.append(option);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction appendCellInput(destination, type, value) {\n    var input = document.createElement(\"input\");\n    input.className = \"cell-input\";\n    input.type = type;\n    input.value = value;\n    input.addEventListener(\"blur\", saveCell);\n    input.addEventListener(\"keydown\", saveCell);\n    destination.append(input);\n}\nfunction appendCellSelect(destination, selected) {\n    var select = document.createElement(\"select\");\n    select.className = \"cell-input\";\n    appendOffices(select);\n    select.selectedIndex = offices.indexOf(selected);\n    select.addEventListener(\"blur\", saveCell);\n    select.addEventListener(\"keydown\", saveCell);\n    destination.append(select);\n}\nfunction appendInput(destination, labelText, type, inputName) {\n    var label = document.createElement(\"label\");\n    var input = document.createElement(\"input\");\n    label.innerText = labelText;\n    input.type = type;\n    input.name = inputName;\n    input.dataset.qa = inputName;\n    input.required = true;\n    label.append(input);\n    destination.append(label);\n}\nfunction appendSelect(destination, labelText, selectName) {\n    var label = document.createElement(\"label\");\n    var select = document.createElement(\"select\");\n    label.innerText = labelText;\n    select.name = selectName;\n    select.dataset.qa = selectName;\n    select.required = true;\n    appendOffices(select);\n    label.append(select);\n    destination.append(label);\n}\nfunction appendButton(destination, buttonText, type) {\n    var button = document.createElement(\"button\");\n    button.innerText = buttonText;\n    button.type = type;\n    button.addEventListener(\"click\", addPerson);\n    destination.append(button);\n}\nfunction appendForm(destination) {\n    var form = document.createElement(\"form\");\n    form.className = \"new-employee-form\";\n    appendInput(form, \"Name:\", \"text\", \"name\");\n    appendInput(form, \"Position:\", \"text\", \"position\");\n    appendSelect(form, \"Office:\", \"office\");\n    appendInput(form, \"Age:\", \"number\", \"age\");\n    appendInput(form, \"Salary:\", \"number\", \"salary\");\n    appendButton(form, \"Save to table\", \"submit\");\n    destination.append(form);\n}\nvar rows = document.querySelectorAll(\"tbody tr\");\nvar people = [];\nvar headers = document.querySelectorAll(\"thead th\");\nvar offices = [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\nvar sortedColumnHeaderText = \"\";\nvar inputEventHandlerFinished = true;\nrows.forEach(function(row) {\n    var _row_children = _sliced_to_array(row.children, 5), employeeName = _row_children[0], position = _row_children[1], office = _row_children[2], age = _row_children[3], salary = _row_children[4];\n    people.push({\n        name: employeeName.innerText,\n        position: position.innerText,\n        office: office.innerText,\n        age: parseInt(age.innerText),\n        salary: salaryToNumber(salary.innerText),\n        active: false\n    });\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = row.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var cell = _step.value;\n            cell.addEventListener(\"dblclick\", editCell);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    row.addEventListener(\"click\", selectRow);\n});\nheaders.forEach(function(header) {\n    header.addEventListener(\"click\", sortTable);\n});\nappendForm(document.body);\n\n//# sourceMappingURL=index.fffed2e5.js.map\n","'use strict';\n\nfunction getCellColumnHeader(cell) {\n  let counter = 0;\n  let currentCell = cell;\n\n  do {\n    counter++;\n    currentCell = currentCell.previousElementSibling;\n  } while (currentCell);\n\n  return headers[counter - 1].innerText.toLowerCase();\n}\n\nfunction getPersonByRow(row) {\n  let counter = 0;\n  let currentRow = row;\n\n  do {\n    counter++;\n    currentRow = currentRow.previousElementSibling;\n  } while (currentRow);\n\n  return people[counter - 1];\n}\n\nfunction salaryToText(salary) {\n  return (\n    '$' +\n    salary\n      .toString()\n      .split('')\n      .reduce(\n        (text, char, index) =>\n          text +\n          char +\n          ((salary.toString().length - index - 1) % 3 === 0 ? ',' : ''),\n        '',\n      )\n      .slice(0, -1)\n  );\n}\n\nfunction salaryToNumber(salary) {\n  return parseInt(salary.replaceAll(',', '').slice(1));\n}\n\nfunction isInputEmpty(text) {\n  return text.length <= 0;\n}\n\nfunction isNameValid(employeeName) {\n  return employeeName.length >= 4;\n}\n\nfunction isTooYoung(age) {\n  return age < 18;\n}\n\nfunction isTooOld(age) {\n  return age > 90;\n}\n\nfunction isSalaryValid(salary) {\n  return salary >= 0;\n}\n\nfunction areInputsValid(employeeName, position, office, age, salary) {\n  for (const arg of arguments) {\n    if (isInputEmpty(arg.value)) {\n      appendNotification(\n        document.body,\n        'Error',\n        'All fields are required!',\n        'error',\n      );\n\n      return false;\n    }\n  }\n\n  if (!isNameValid(employeeName.value)) {\n    appendNotification(document.body, 'Error', 'Name is too short!', 'error');\n\n    return false;\n  }\n\n  if (isTooYoung(age.value)) {\n    appendNotification(\n      document.body,\n      'Error',\n      'Employee is too young!',\n      'error',\n    );\n\n    return false;\n  }\n\n  if (isTooOld(age.value)) {\n    appendNotification(document.body, 'Error', 'Employee is too old!', 'error');\n\n    return false;\n  }\n\n  if (!isSalaryValid(salary.value)) {\n    appendNotification(\n      document.body,\n      'Error',\n      'Salary should be higher or equal to 0!',\n      'error',\n    );\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction refreshTable() {\n  const tBody = document.querySelector('tbody');\n  const newTBody = document.createElement('tbody');\n\n  for (const person of people) {\n    const row = document.createElement('tr');\n    const cells = Array.from({ length: 5 }, () => document.createElement('td'));\n\n    const { name: personName, position, office, age, salary, active } = person;\n\n    cells[0].textContent = personName;\n    cells[1].textContent = position;\n    cells[2].textContent = office;\n    cells[3].textContent = age;\n    cells[4].textContent = salaryToText(salary);\n\n    cells.forEach((cell) => {\n      cell.addEventListener('dblclick', editCell);\n      row.append(cell);\n    });\n\n    if (active) {\n      row.classList.add('active');\n    }\n\n    row.addEventListener('click', selectRow);\n    newTBody.append(row);\n  }\n\n  tBody.replaceWith(newTBody);\n}\n\nfunction getComparator(targetHeaderText) {\n  switch (targetHeaderText) {\n    case 'Name':\n      return (firstPerson, secondPerson) => {\n        if (firstPerson.name > secondPerson.name) {\n          return 1;\n        }\n\n        if (firstPerson.name < secondPerson.name) {\n          return -1;\n        }\n\n        return 0;\n      };\n\n    case 'Position':\n      return (firstPerson, secondPerson) => {\n        if (firstPerson.position > secondPerson.position) {\n          return 1;\n        }\n\n        if (firstPerson.position < secondPerson.position) {\n          return -1;\n        }\n\n        return 0;\n      };\n\n    case 'Office':\n      return (firstPerson, secondPerson) => {\n        if (firstPerson.office > secondPerson.office) {\n          return 1;\n        }\n\n        if (firstPerson.office < secondPerson.office) {\n          return -1;\n        }\n\n        return 0;\n      };\n\n    case 'Age':\n      return (firstPerson, secondPerson) => firstPerson.age - secondPerson.age;\n\n    case 'Salary':\n      return (firstPerson, secondPerson) =>\n        firstPerson.salary - secondPerson.salary;\n  }\n}\n\nfunction sortTable() {\n  const targetHeaderText = this.innerText;\n\n  if (targetHeaderText === sortedColumnHeaderText) {\n    people.reverse();\n  } else {\n    sortedColumnHeaderText = targetHeaderText;\n    people.sort(getComparator(targetHeaderText));\n  }\n\n  refreshTable();\n}\n\nfunction deactivateAllRows() {\n  document.querySelectorAll('tbody tr').forEach((row) => {\n    row.classList.remove('active');\n  });\n\n  people.forEach((person) => {\n    person.active = false;\n  });\n}\n\nfunction selectRow() {\n  deactivateAllRows();\n\n  this.classList.add('active');\n\n  const rowsAfterActivation = document.querySelectorAll('tbody tr');\n\n  for (let i = 0; i < rowsAfterActivation.length; i++) {\n    if (rowsAfterActivation[i].matches('.active')) {\n      people[i].active = true;\n    }\n  }\n}\n\nfunction saveCell(e) {\n  if (\n    inputEventHandlerFinished &&\n    (e.type === 'blur' || (e.type === 'keydown' && e.key === 'Enter'))\n  ) {\n    const header = getCellColumnHeader(this.parentElement);\n    let isInputValid = true;\n\n    inputEventHandlerFinished = false;\n\n    if (!isInputEmpty(this.value)) {\n      switch (header) {\n        case 'name':\n          if (!isNameValid(this.value)) {\n            isInputValid = false;\n          }\n          break;\n\n        case 'age':\n          if (isTooYoung(this.value) || isTooOld(this.value)) {\n            isInputValid = false;\n          }\n          break;\n\n        case 'salary':\n          if (!isSalaryValid(this.value)) {\n            isInputValid = false;\n          }\n      }\n    } else {\n      isInputValid = false;\n    }\n\n    if (isInputValid) {\n      getPersonByRow(this.parentElement.parentElement)[header] = this.value;\n      sortedColumnHeaderText = '';\n    }\n\n    refreshTable();\n    this.remove();\n    inputEventHandlerFinished = true;\n  }\n}\n\nfunction editCell() {\n  if (\n    this.firstChild.nodeType === 3 &&\n    !document.querySelector('td > input, td > select')\n  ) {\n    switch (getCellColumnHeader(this)) {\n      case 'name':\n      case 'position':\n        appendCellInput(this, 'text', this.innerText);\n        break;\n      case 'office':\n        appendCellSelect(this, this.innerText);\n        break;\n      case 'age':\n        appendCellInput(this, 'number', this.innerText);\n        break;\n      case 'salary':\n        appendCellInput(this, 'number', salaryToNumber(this.innerText));\n    }\n    this.firstChild.remove();\n  }\n}\n\nfunction addPerson(e) {\n  const [employeeName, position, age, salary] =\n    document.querySelectorAll('label > input');\n  const office = document.querySelector('select');\n\n  e.preventDefault();\n\n  if (areInputsValid(employeeName, position, office, age, salary)) {\n    people.push({\n      name: employeeName.value,\n      position: position.value,\n      office: office.value,\n      age: age.value,\n      salary: salary.value,\n      active: false,\n    });\n\n    refreshTable();\n    sortedColumnHeaderText = '';\n\n    appendNotification(\n      document.body,\n      'Success',\n      'New person has been added!',\n      'success',\n    );\n  }\n}\n\nfunction appendNotification(destination, title, description, type) {\n  const notification = document.createElement('div');\n  const notificationTitle = document.createElement('h2');\n  const notificationDescription = document.createElement('p');\n\n  notification.className = 'notification ' + type;\n  notification.dataset.qa = 'notification';\n  notificationTitle.className = 'title';\n  notificationTitle.textContent = title;\n  notificationDescription.textContent = description;\n\n  notification.append(notificationTitle);\n  notification.append(notificationDescription);\n  destination.append(notification);\n\n  setTimeout(() => {\n    notification.style.display = 'none';\n  }, 1999);\n}\n\nfunction appendOffices(destination) {\n  for (const office of offices) {\n    const option = document.createElement('option');\n\n    option.innerText = office;\n    option.value = office;\n\n    destination.append(option);\n  }\n}\n\nfunction appendCellInput(destination, type, value) {\n  const input = document.createElement('input');\n\n  input.className = 'cell-input';\n  input.type = type;\n  input.value = value;\n\n  input.addEventListener('blur', saveCell);\n  input.addEventListener('keydown', saveCell);\n\n  destination.append(input);\n}\n\nfunction appendCellSelect(destination, selected) {\n  const select = document.createElement('select');\n\n  select.className = 'cell-input';\n  appendOffices(select);\n  select.selectedIndex = offices.indexOf(selected);\n\n  select.addEventListener('blur', saveCell);\n  select.addEventListener('keydown', saveCell);\n\n  destination.append(select);\n}\n\nfunction appendInput(destination, labelText, type, inputName) {\n  const label = document.createElement('label');\n  const input = document.createElement('input');\n\n  label.innerText = labelText;\n  input.type = type;\n  input.name = inputName;\n  input.dataset.qa = inputName;\n  input.required = true;\n\n  label.append(input);\n  destination.append(label);\n}\n\nfunction appendSelect(destination, labelText, selectName) {\n  const label = document.createElement('label');\n  const select = document.createElement('select');\n\n  label.innerText = labelText;\n  select.name = selectName;\n  select.dataset.qa = selectName;\n  select.required = true;\n  appendOffices(select);\n\n  label.append(select);\n  destination.append(label);\n}\n\nfunction appendButton(destination, buttonText, type) {\n  const button = document.createElement('button');\n\n  button.innerText = buttonText;\n  button.type = type;\n\n  button.addEventListener('click', addPerson);\n\n  destination.append(button);\n}\n\nfunction appendForm(destination) {\n  const form = document.createElement('form');\n\n  form.className = 'new-employee-form';\n\n  appendInput(form, 'Name:', 'text', 'name');\n  appendInput(form, 'Position:', 'text', 'position');\n\n  appendSelect(form, 'Office:', 'office');\n\n  appendInput(form, 'Age:', 'number', 'age');\n  appendInput(form, 'Salary:', 'number', 'salary');\n  appendButton(form, 'Save to table', 'submit');\n\n  destination.append(form);\n}\n\nconst rows = document.querySelectorAll('tbody tr');\nconst people = [];\nconst headers = document.querySelectorAll('thead th');\nconst offices = [\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\nlet sortedColumnHeaderText = '';\nlet inputEventHandlerFinished = true;\n\nrows.forEach((row) => {\n  const [employeeName, position, office, age, salary] = row.children;\n\n  people.push({\n    name: employeeName.innerText,\n    position: position.innerText,\n    office: office.innerText,\n    age: parseInt(age.innerText),\n    salary: salaryToNumber(salary.innerText),\n    active: false,\n  });\n\n  for (const cell of row.children) {\n    cell.addEventListener('dblclick', editCell);\n  }\n\n  row.addEventListener('click', selectRow);\n});\n\nheaders.forEach((header) => {\n  header.addEventListener('click', sortTable);\n});\n\nappendForm(document.body);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_sliced_to_array","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","getCellColumnHeader","cell","counter","currentCell","previousElementSibling","headers","innerText","toLowerCase","salaryToNumber","salary","parseInt","replaceAll","isNameValid","employeeName","refreshTable","tBody","document","querySelector","newTBody","createElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","people","_loop","person","row","cells","personName","position","office","age","active","textContent","split","reduce","text","char","index","forEach","addEventListener","editCell","append","classList","add","selectRow","return","replaceWith","sortTable","targetHeaderText","sortedColumnHeaderText","reverse","sort","getComparator","firstPerson","secondPerson","querySelectorAll","remove","rowsAfterActivation","matches","saveCell","e","inputEventHandlerFinished","type","key","header","parentElement","isInputValid","isTooYoung","getPersonByRow","currentRow","firstChild","nodeType","appendCellInput","selected","select","className","appendOffices","selectedIndex","offices","indexOf","destination","appendNotification","title","description","notification","notificationTitle","notificationDescription","dataset","qa","setTimeout","style","display","option","input","appendInput","labelText","inputName","label","required","form","selectName","buttonText","button","rows","_row_children","children","body","_document_querySelectorAll","preventDefault","areInputsValid","arguments","arg"],"version":3,"file":"index.fffed2e5.js.map"}